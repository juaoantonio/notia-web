/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as publicIndexRouteImport } from './routes/(public)/index'
import { Route as publicAuthLayoutRouteImport } from './routes/(public)/auth/_layout'
import { Route as publicAuthLayoutRegisterRouteImport } from './routes/(public)/auth/_layout.register'
import { Route as publicAuthLayoutLoginRouteImport } from './routes/(public)/auth/_layout.login'

const publicAuthRouteImport = createFileRoute('/(public)/auth')()

const publicAuthRoute = publicAuthRouteImport.update({
  id: '/(public)/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const publicIndexRoute = publicIndexRouteImport.update({
  id: '/(public)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const publicAuthLayoutRoute = publicAuthLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => publicAuthRoute,
} as any)
const publicAuthLayoutRegisterRoute =
  publicAuthLayoutRegisterRouteImport.update({
    id: '/register',
    path: '/register',
    getParentRoute: () => publicAuthLayoutRoute,
  } as any)
const publicAuthLayoutLoginRoute = publicAuthLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => publicAuthLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '/auth': typeof publicAuthLayoutRouteWithChildren
  '/auth/login': typeof publicAuthLayoutLoginRoute
  '/auth/register': typeof publicAuthLayoutRegisterRoute
}
export interface FileRoutesByTo {
  '/': typeof publicIndexRoute
  '/auth': typeof publicAuthLayoutRouteWithChildren
  '/auth/login': typeof publicAuthLayoutLoginRoute
  '/auth/register': typeof publicAuthLayoutRegisterRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(public)/': typeof publicIndexRoute
  '/(public)/auth': typeof publicAuthRouteWithChildren
  '/(public)/auth/_layout': typeof publicAuthLayoutRouteWithChildren
  '/(public)/auth/_layout/login': typeof publicAuthLayoutLoginRoute
  '/(public)/auth/_layout/register': typeof publicAuthLayoutRegisterRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | '/auth/login' | '/auth/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/auth/login' | '/auth/register'
  id:
    | '__root__'
    | '/(public)/'
    | '/(public)/auth'
    | '/(public)/auth/_layout'
    | '/(public)/auth/_layout/login'
    | '/(public)/auth/_layout/register'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  publicIndexRoute: typeof publicIndexRoute
  publicAuthRoute: typeof publicAuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)/auth': {
      id: '/(public)/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof publicAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/auth/_layout': {
      id: '/(public)/auth/_layout'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof publicAuthLayoutRouteImport
      parentRoute: typeof publicAuthRoute
    }
    '/(public)/auth/_layout/register': {
      id: '/(public)/auth/_layout/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof publicAuthLayoutRegisterRouteImport
      parentRoute: typeof publicAuthLayoutRoute
    }
    '/(public)/auth/_layout/login': {
      id: '/(public)/auth/_layout/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof publicAuthLayoutLoginRouteImport
      parentRoute: typeof publicAuthLayoutRoute
    }
  }
}

interface publicAuthLayoutRouteChildren {
  publicAuthLayoutLoginRoute: typeof publicAuthLayoutLoginRoute
  publicAuthLayoutRegisterRoute: typeof publicAuthLayoutRegisterRoute
}

const publicAuthLayoutRouteChildren: publicAuthLayoutRouteChildren = {
  publicAuthLayoutLoginRoute: publicAuthLayoutLoginRoute,
  publicAuthLayoutRegisterRoute: publicAuthLayoutRegisterRoute,
}

const publicAuthLayoutRouteWithChildren =
  publicAuthLayoutRoute._addFileChildren(publicAuthLayoutRouteChildren)

interface publicAuthRouteChildren {
  publicAuthLayoutRoute: typeof publicAuthLayoutRouteWithChildren
}

const publicAuthRouteChildren: publicAuthRouteChildren = {
  publicAuthLayoutRoute: publicAuthLayoutRouteWithChildren,
}

const publicAuthRouteWithChildren = publicAuthRoute._addFileChildren(
  publicAuthRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  publicIndexRoute: publicIndexRoute,
  publicAuthRoute: publicAuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
