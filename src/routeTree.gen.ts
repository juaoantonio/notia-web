/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as PrivateRouteRouteImport } from './routes/_private/route'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as PrivateHomeIndexRouteImport } from './routes/_private/home/index'
import { Route as PublicAuthLayoutRouteImport } from './routes/_public/auth/_layout'
import { Route as PublicAuthLayoutRegisterRouteImport } from './routes/_public/auth/_layout.register'
import { Route as PublicAuthLayoutLoginRouteImport } from './routes/_public/auth/_layout.login'

const PublicAuthRouteImport = createFileRoute('/_public/auth')()

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateRouteRoute = PrivateRouteRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicAuthRoute = PublicAuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PrivateHomeIndexRoute = PrivateHomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const PublicAuthLayoutRoute = PublicAuthLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => PublicAuthRoute,
} as any)
const PublicAuthLayoutRegisterRoute =
  PublicAuthLayoutRegisterRouteImport.update({
    id: '/register',
    path: '/register',
    getParentRoute: () => PublicAuthLayoutRoute,
  } as any)
const PublicAuthLayoutLoginRoute = PublicAuthLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicAuthLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof PublicIndexRoute
  '/auth': typeof PublicAuthLayoutRouteWithChildren
  '/home': typeof PrivateHomeIndexRoute
  '/auth/login': typeof PublicAuthLayoutLoginRoute
  '/auth/register': typeof PublicAuthLayoutRegisterRoute
}
export interface FileRoutesByTo {
  '/': typeof PublicIndexRoute
  '/auth': typeof PublicAuthLayoutRouteWithChildren
  '/home': typeof PrivateHomeIndexRoute
  '/auth/login': typeof PublicAuthLayoutLoginRoute
  '/auth/register': typeof PublicAuthLayoutRegisterRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_private': typeof PrivateRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/_public/': typeof PublicIndexRoute
  '/_public/auth': typeof PublicAuthRouteWithChildren
  '/_public/auth/_layout': typeof PublicAuthLayoutRouteWithChildren
  '/_private/home/': typeof PrivateHomeIndexRoute
  '/_public/auth/_layout/login': typeof PublicAuthLayoutLoginRoute
  '/_public/auth/_layout/register': typeof PublicAuthLayoutRegisterRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | '/home' | '/auth/login' | '/auth/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/home' | '/auth/login' | '/auth/register'
  id:
    | '__root__'
    | '/_private'
    | '/_public'
    | '/_public/'
    | '/_public/auth'
    | '/_public/auth/_layout'
    | '/_private/home/'
    | '/_public/auth/_layout/login'
    | '/_public/auth/_layout/register'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/auth': {
      id: '/_public/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof PublicAuthRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_private/home/': {
      id: '/_private/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof PrivateHomeIndexRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_public/auth/_layout': {
      id: '/_public/auth/_layout'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof PublicAuthLayoutRouteImport
      parentRoute: typeof PublicAuthRoute
    }
    '/_public/auth/_layout/register': {
      id: '/_public/auth/_layout/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof PublicAuthLayoutRegisterRouteImport
      parentRoute: typeof PublicAuthLayoutRoute
    }
    '/_public/auth/_layout/login': {
      id: '/_public/auth/_layout/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof PublicAuthLayoutLoginRouteImport
      parentRoute: typeof PublicAuthLayoutRoute
    }
  }
}

interface PrivateRouteRouteChildren {
  PrivateHomeIndexRoute: typeof PrivateHomeIndexRoute
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateHomeIndexRoute: PrivateHomeIndexRoute,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

interface PublicAuthLayoutRouteChildren {
  PublicAuthLayoutLoginRoute: typeof PublicAuthLayoutLoginRoute
  PublicAuthLayoutRegisterRoute: typeof PublicAuthLayoutRegisterRoute
}

const PublicAuthLayoutRouteChildren: PublicAuthLayoutRouteChildren = {
  PublicAuthLayoutLoginRoute: PublicAuthLayoutLoginRoute,
  PublicAuthLayoutRegisterRoute: PublicAuthLayoutRegisterRoute,
}

const PublicAuthLayoutRouteWithChildren =
  PublicAuthLayoutRoute._addFileChildren(PublicAuthLayoutRouteChildren)

interface PublicAuthRouteChildren {
  PublicAuthLayoutRoute: typeof PublicAuthLayoutRouteWithChildren
}

const PublicAuthRouteChildren: PublicAuthRouteChildren = {
  PublicAuthLayoutRoute: PublicAuthLayoutRouteWithChildren,
}

const PublicAuthRouteWithChildren = PublicAuthRoute._addFileChildren(
  PublicAuthRouteChildren,
)

interface PublicRouteRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
  PublicAuthRoute: typeof PublicAuthRouteWithChildren
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
  PublicAuthRoute: PublicAuthRouteWithChildren,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
